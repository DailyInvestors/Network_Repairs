     Have you ever had your system just start acting up? You realize it is probably one of the newer Programs that you recently installed. But not being a Professional you have no clue what to do. Well we are abot to intruduce you to a tool, that can help aid in in assistance to trace all activity related to a Specific Program. 
    "STrace" is a diagnostic tool, that records any signal and or Process for the Program you are Inspecting. This works in-between the Program and kernels allowing to request memory, memeory corrpution,  network communications, and the process of Creation.
     "STrace" can be installed on any linux. Here is a demonstration of hwo to install on  Debian Linux Bookworm { sudo apt install strace }. Once you download this program, and begin the activation. This starts by Intercepting System Calls. When a program makes a system call (e.g., open(), read(), write(), execve(), fork(), socket()) Strace captures information about that call, or the process initiuating these calls.
     While jt is capturing the system calls, this tool also will capture all arguments, and the returning values. This is essential to help understand what some of the calls and processes are actually doing. A skilled Attacker, will manipulate a normal process, and keep the same function running. However the returning result will be nothing like the original default.
     The bennifit to using "strace" over other debuggers is due to its technique in capturing the Signals of these processes. Some of the captures may include { SIGINT, SIGKILL, SIGSEGV, etc }. With "strace" capturing these signals, you can compare it with your network, search Public Records to help determine if it is the correct signal for the Program that you are tracing.
     If you are experiencing start up issues, if your program wont accept a file, or strange behaviors are starting to occur, this is the time when you should begin your local tracing. To start strace, you will use the command "strace ls". This will execute the tool, and begin immediate analysis. This command will instantly print out all the current running system calls().
   Now this command "strace pid <pid>, will execute the same trace for your desired program. You will have to place the PID number for the program you wish to inspect in the <pid> area. 
   Now to filter the systems incoming calls, this command
  "strace -e trace=open,read,write cat /etc/passwd". This command is extremely useful when running long system calls. This is all depending on the Program and Call that your are testing. 
    Now to dive in a little deeper. Their is another tool called Curl. We can capture a pages information with this. At the same time while we use curl, we can enhance our security by running "strace -e trace=network curl example.com." This will analyze all the output received from Curl. This can help identify malicious activities via downloads, or any web interface. While running curl, we can also redirect all the output to a selected file with "strace -f myprogram". This can help aid in deeper analysis of the program and site. Stopping malicious attacks from coming in on your Curl Download/Upload. The -f option allows the tool to follow all the Child Node Processes from this scan 
     There are a variety of more commands to help analyze any situation, or process. At times testing, debugging, creating a Program this tool is essential for any type of Development. On our Future Blogs we will continue to dive deeper in how using strace is essential for any Program or Test. 
     

     
